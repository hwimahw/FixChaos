plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.springframework.boot' version '3.0.2' apply false
    id 'checkstyle'
}

repositories {
    mavenCentral()
}

ext {
    springBootVersion = "3.0.2"
    lombokVersion = "1.18.24"
    postgresVersion = "42.5.3"
    openApiGeneratorVersion = "6.3.0"
    openApiUiVersion = "2.0.2"
    openApiToolsVersion = "0.2.4"
    mapStructVersion = "1.5.3.Final"
    testcontainersPostgresqlVersion = '1.17.6'
    h2DataBaseVersion = '2.2.224'
    junitVersion = '5.10.2'
    securityVersion = '3.2.4'
    securityTestVersion = '6.2.3'
    hamcrestVersion = '2.2'
    assertJVersion = '3.26.0'
}

subprojects { ->
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'checkstyle'

    def configDir = "${project.rootDir}"
    checkstyle {
        toolVersion '8.36.1'
        configFile file("$configDir/checkstyle/checkstyle.xml")
        configProperties.checkstyleSuppressionsPath = file("$configDir/checkstyle/suppressions.xml").absolutePath
    }

    checkstyleMain {
        source = 'src/main/java'
    }

    checkstyleTest {
        source = 'src/test/java'
    }


    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor 'org.projectlombok:lombok'
        implementation "org.postgresql:postgresql:${postgresVersion}"
        implementation "org.mapstruct:mapstruct:${mapStructVersion}"
        annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation "com.h2database:h2:${h2DataBaseVersion}"
        testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
        implementation "org.springframework.boot:spring-boot-starter-security:${securityVersion}"
        testImplementation "org.springframework.security:spring-security-test:${securityTestVersion}"

    }

    test {
        useJUnitPlatform()
    }

    sourceSets {
        integrationTest {
            java.srcDir file("src/integrationTest/java")
            resources.srcDir file("src/integrationTest/resources")
            runtimeClasspath += sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
            compileClasspath += sourceSets.main.compileClasspath + sourceSets.test.compileClasspath
        }
    }

}